{"version":3,"file":"RadioGroup.js","sources":["../../src/RadioGroup/RadioGroup.tsx"],"sourcesContent":["import React, { Children, cloneElement, useState } from 'react';\nimport { useId } from '@mantine/hooks';\nimport { DefaultProps, MantineNumberSize, useMantineTheme, MantineSize } from '@mantine/theme';\nimport { InputWrapper, InputWrapperBaseProps } from '../InputWrapper/InputWrapper';\nimport { Radio, RadioProps } from './Radio/Radio';\nimport { sizes } from './Radio/Radio.styles';\nimport useStyles from './RadioGroup.styles';\n\nexport { Radio };\nexport type { RadioProps };\n\nexport const RADIO_SIZES = sizes;\n\nexport interface RadioGroupProps\n  extends DefaultProps,\n    InputWrapperBaseProps,\n    Omit<React.ComponentPropsWithoutRef<'div'>, 'onChange'> {\n  /** <Radio /> components only */\n  children: React.ReactNode;\n\n  /** Input name attribute, used to bind radios in one group, by default generated randomly with use-id hook */\n  name?: string;\n\n  /** Value of currently selected radio */\n  value?: string;\n\n  /** Called when value changes */\n  onChange?(value: string): void;\n\n  /** Initial value for uncontrolled component */\n  defaultValue?: string;\n\n  /** Radios position */\n  variant?: 'horizontal' | 'vertical';\n\n  /** Spacing between radios in horizontal variant */\n  spacing?: MantineNumberSize;\n\n  /** Active radio color */\n  color?: string;\n\n  /** Predefined label fontSize, radio width, height and border-radius */\n  size?: MantineSize;\n}\n\nexport function RadioGroup({\n  className,\n  themeOverride,\n  name,\n  children,\n  value,\n  defaultValue,\n  onChange,\n  variant = 'horizontal',\n  spacing = 'md',\n  color,\n  size,\n  ...others\n}: RadioGroupProps) {\n  const [_value, setValue] = useState(value || defaultValue || '');\n  const finalValue = typeof value === 'string' ? value : _value;\n  const classes = useStyles({ spacing, variant, theme: useMantineTheme(themeOverride) });\n  const uuid = useId(name);\n\n  const handleChange = (v: string) => {\n    setValue(v);\n    typeof onChange === 'function' && onChange(v);\n  };\n\n  const radios: any = (Children.toArray(children) as React.ReactElement[])\n    .filter((item) => item.type === Radio)\n    .map((radio, index) =>\n      cloneElement(radio, {\n        key: index,\n        checked: finalValue === radio.props.value,\n        name: uuid,\n        color,\n        size,\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) =>\n          handleChange(event.currentTarget.value),\n      })\n    );\n\n  return (\n    <InputWrapper labelElement=\"div\" {...others}>\n      <div role=\"radiogroup\" className={classes.wrapper}>\n        {radios}\n      </div>\n    </InputWrapper>\n  );\n}\n\nRadioGroup.displayName = '@mantine/core/RadioGroup';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAWa,cAAc;oBAkCA,IAaP;AAbO,eACzB;AAAA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV,UAAU;AAAA,IACV;AAAA,IACA;AAAA,MAXyB,IAYtB,mBAZsB,IAYtB;AAAA,IAXH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAGA,QAAM,CAAC,QAAQ,YAAY,SAAS,SAAS,gBAAgB;AAC7D,QAAM,aAAa,OAAO,UAAU,WAAW,QAAQ;AACvD,QAAM,UAAU,UAAU,CAAE,SAAS,SAAS,OAAO,gBAAgB;AACrE,QAAM,OAAO,MAAM;AAEnB,QAAM,eAAe,CAAC,MAAc;AAClC,aAAS;AACT,WAAO,aAAa,cAAc,SAAS;AAAA;AAG7C,QAAM,SAAe,SAAS,QAAQ,UACnC,OAAO,CAAC,SAAS,KAAK,SAAS,OAC/B,IAAI,CAAC,OAAO,UACX,aAAa,OAAO;AAAA,IAClB,KAAK;AAAA,IACL,SAAS,eAAe,MAAM,MAAM;AAAA,IACpC,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA,UAAU,CAAC,UACT,aAAa,MAAM,cAAc;AAAA;AAIzC,6CACG,cAAD;AAAA,IAAc,cAAa;AAAA,KAAU,6CAClC,OAAD;AAAA,IAAK,MAAK;AAAA,IAAa,WAAW,QAAQ;AAAA,KACvC;AAAA;AAMT,WAAW,cAAc;;;;"}
{"version":3,"file":"Select.js","sources":["../../src/Select/Select.tsx"],"sourcesContent":["import React from 'react';\nimport { useId } from '@mantine/hooks';\nimport { DefaultProps, useMantineTheme } from '@mantine/theme';\nimport { InputWrapperBaseProps, InputWrapper } from '../InputWrapper/InputWrapper';\nimport { Input, InputProps } from '../Input/Input';\nimport { ChevronIcon } from './ChevronIcon';\n\ninterface SelectItem {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\nexport interface SelectProps\n  extends DefaultProps,\n    InputWrapperBaseProps,\n    Omit<InputProps, 'rightSection' | 'rightSectionWidth' | 'rightSectionProps'>,\n    React.ComponentPropsWithoutRef<'select'> {\n  /** id is used to bind input and label, if not passed unique id will be generated for each input */\n  id?: string;\n\n  /** Adds hidden option to select and sets it as selected if value is not present */\n  placeholder?: string;\n\n  /** Data used to render options */\n  data: SelectItem[];\n\n  /** Style properties added to select element */\n  inputStyle?: React.CSSProperties;\n\n  /** Props passed to root element (InputWrapper component) */\n  wrapperProps?: Record<string, any>;\n\n  /** Get element ref */\n  elementRef?: React.ForwardedRef<HTMLSelectElement>;\n}\n\nexport function Select({\n  id,\n  className,\n  required,\n  label,\n  error,\n  style,\n  data,\n  placeholder,\n  themeOverride,\n  wrapperProps,\n  inputStyle,\n  description,\n  elementRef,\n  ...others\n}: SelectProps) {\n  const theme = useMantineTheme(themeOverride);\n  const uuid = useId(id);\n\n  const options = data.map((item) => (\n    <option key={item.value} value={item.value} disabled={item.disabled}>\n      {item.label}\n    </option>\n  ));\n\n  if (placeholder) {\n    options.unshift(\n      <option key=\"placeholder\" value=\"\" selected disabled hidden>\n        {placeholder}\n      </option>\n    );\n  }\n\n  const chevron = (\n    <ChevronIcon style={{ color: error ? theme.colors.red[6] : theme.colors.gray[6] }} />\n  );\n\n  return (\n    <InputWrapper\n      {...wrapperProps}\n      required={required}\n      id={uuid}\n      label={label}\n      error={error}\n      className={className}\n      style={style}\n      themeOverride={themeOverride}\n      description={description}\n    >\n      <Input<'select', HTMLSelectElement>\n        {...others}\n        component=\"select\"\n        invalid={!!error}\n        style={inputStyle}\n        aria-required={required}\n        elementRef={elementRef}\n        id={uuid}\n        inputStyle={inputStyle}\n        rightSection={chevron}\n        rightSectionProps={{ style: { pointerEvents: 'none' } }}\n        required={required}\n        themeOverride={themeOverride}\n      >\n        {options}\n      </Input>\n    </InputWrapper>\n  );\n}\n\nSelect.displayName = '@mantine/core/Select';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAqCuB,IAeP;AAfO,eACrB;AAAA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MAbqB,IAclB,mBAdkB,IAclB;AAAA,IAbH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAGA,QAAM,QAAQ,gBAAgB;AAC9B,QAAM,OAAO,MAAM;AAEnB,QAAM,UAAU,KAAK,IAAI,CAAC,6CACvB,UAAD;AAAA,IAAQ,KAAK,KAAK;AAAA,IAAO,OAAO,KAAK;AAAA,IAAO,UAAU,KAAK;AAAA,KACxD,KAAK;AAIV,MAAI,aAAa;AACf,YAAQ,4CACL,UAAD;AAAA,MAAQ,KAAI;AAAA,MAAc,OAAM;AAAA,MAAG,UAAQ;AAAA,MAAC,UAAQ;AAAA,MAAC,QAAM;AAAA,OACxD;AAAA;AAKP,QAAM,8CACH,aAAD;AAAA,IAAa,OAAO,CAAE,OAAO,QAAQ,MAAM,OAAO,IAAI,KAAK,MAAM,OAAO,KAAK;AAAA;AAG/E,6CACG,cAAD,iCACM,eADN;AAAA,IAEE;AAAA,IACA,IAAI;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,0CAEC,OAAD,iCACM,SADN;AAAA,IAEE,WAAU;AAAA,IACV,SAAS,CAAC,CAAC;AAAA,IACX,OAAO;AAAA,IACP,iBAAe;AAAA,IACf;AAAA,IACA,IAAI;AAAA,IACJ;AAAA,IACA,cAAc;AAAA,IACd,mBAAmB,CAAE,OAAO,CAAE,eAAe;AAAA,IAC7C;AAAA,IACA;AAAA,MAEC;AAAA;AAMT,OAAO,cAAc;;;;"}
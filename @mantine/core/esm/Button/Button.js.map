{"version":3,"file":"Button.js","sources":["../../src/Button/Button.tsx"],"sourcesContent":["/* eslint-disable react/button-has-type */\n// ^ this is fun â€“ https://github.com/yannickcr/eslint-plugin-react/issues/1555\n\nimport React from 'react';\nimport cx from 'clsx';\nimport { useMantineTheme, DefaultProps, MantineSize, MantineNumberSize } from '@mantine/theme';\nimport { ComponentPassThrough } from '@mantine/types';\nimport useStyles, { heights } from './Button.styles';\n\nexport const BUTTON_SIZES = heights;\n\nexport interface ButtonBaseProps extends DefaultProps {\n  /** Predefined button size */\n  size?: MantineSize;\n\n  /** Button type attribute */\n  type?: 'submit' | 'button' | 'reset';\n\n  /** Button color from theme */\n  color?: string;\n\n  /** Adds icon before button label  */\n  leftIcon?: React.ReactNode;\n\n  /** Adds icon after button label  */\n  rightIcon?: React.ReactNode;\n\n  /** Sets button width to 100% of parent element */\n  fullWidth?: boolean;\n\n  /** Button border-radius from theme or number to set border-radius in px */\n  radius?: MantineNumberSize;\n\n  /** Controls button appearance */\n  variant?: 'link' | 'filled' | 'outline' | 'light';\n}\n\nexport function Button<\n  T extends React.ElementType = 'button',\n  U extends HTMLElement = HTMLButtonElement\n>({\n  className,\n  size = 'md',\n  color,\n  type = 'button',\n  disabled = false,\n  children,\n  leftIcon,\n  rightIcon,\n  fullWidth = false,\n  variant = 'filled',\n  radius = 'sm',\n  component: Element = 'button',\n  elementRef,\n  themeOverride,\n  ...others\n}: ComponentPassThrough<T, ButtonBaseProps> & {\n  /** Get root element ref */\n  elementRef?: React.ForwardedRef<U>;\n}) {\n  const classes = useStyles({\n    radius,\n    color,\n    size,\n    fullWidth,\n    theme: useMantineTheme(themeOverride),\n  });\n\n  return (\n    <Element\n      {...others}\n      className={cx(classes.shared, classes[variant], className)}\n      type={type}\n      disabled={disabled}\n      ref={elementRef}\n      onTouchStart={() => {}}\n    >\n      <div className={classes.inner}>\n        {leftIcon && (\n          <span data-mantine-left-icon className={cx(classes.icon, classes.leftIcon)}>\n            {leftIcon}\n          </span>\n        )}\n\n        <span className={classes.label} data-mantine-label>\n          {children}\n        </span>\n\n        {rightIcon && (\n          <span data-mantine-right-icon className={cx(classes.icon, classes.rightIcon)}>\n            {rightIcon}\n          </span>\n        )}\n      </div>\n    </Element>\n  );\n}\n\nButton.displayName = '@mantine/core/Button';\n\nexport type ButtonProps = React.ComponentProps<typeof Button>;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MASa,eAAe;gBA+B1B,IAmBC;AAnBD,eACA;AAAA;AAAA,IACA,OAAO;AAAA,IACP;AAAA,IACA,OAAO;AAAA,IACP,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,SAAS;AAAA,IACT,WAAW,UAAU;AAAA,IACrB;AAAA,IACA;AAAA,MAdA,IAeG,mBAfH,IAeG;AAAA,IAdH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAMA,QAAM,UAAU,UAAU;AAAA,IACxB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO,gBAAgB;AAAA;AAGzB,6CACG,SAAD,iCACM,SADN;AAAA,IAEE,WAAW,GAAG,QAAQ,QAAQ,QAAQ,UAAU;AAAA,IAChD;AAAA,IACA;AAAA,IACA,KAAK;AAAA,IACL,cAAc,MAAM;AAAA;AAAA,0CAEnB,OAAD;AAAA,IAAK,WAAW,QAAQ;AAAA,KACrB,gDACE,QAAD;AAAA,IAAM,0BAAsB;AAAA,IAAC,WAAW,GAAG,QAAQ,MAAM,QAAQ;AAAA,KAC9D,+CAIJ,QAAD;AAAA,IAAM,WAAW,QAAQ;AAAA,IAAO,sBAAkB;AAAA,KAC/C,WAGF,iDACE,QAAD;AAAA,IAAM,2BAAuB;AAAA,IAAC,WAAW,GAAG,QAAQ,MAAM,QAAQ;AAAA,KAC/D;AAAA;AAQb,OAAO,cAAc;;;;"}
import React from 'react';
import { DefaultProps } from '@mantine/theme';
export interface TitleProps extends DefaultProps, React.ComponentPropsWithoutRef<'h1'> {
    /** Defines component and styles which will be used */
    order?: 1 | 2 | 3 | 4 | 5 | 6;
}
export declare function Title({ className, themeOverride, order, children, ...others }: TitleProps): React.DetailedReactHTMLElement<{
    style?: React.CSSProperties;
    color?: string;
    translate?: "yes" | "no";
    hidden?: boolean;
    slot?: string;
    title?: string;
    key?: React.Key;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    contentEditable?: "inherit" | (boolean | "true" | "false");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    id?: string;
    lang?: string;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    tabIndex?: number;
    radioGroup?: string;
    role?: string;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search";
    is?: string;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "none" | "inline" | "list" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "none" | "copy" | "move" | "link" | "execute" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "grid" | "listbox" | "dialog" | "menu" | "true" | "false" | "tree";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: React.ClipboardEventHandler<HTMLHeadingElement>;
    onCopyCapture?: React.ClipboardEventHandler<HTMLHeadingElement>;
    onCut?: React.ClipboardEventHandler<HTMLHeadingElement>;
    onCutCapture?: React.ClipboardEventHandler<HTMLHeadingElement>;
    onPaste?: React.ClipboardEventHandler<HTMLHeadingElement>;
    onPasteCapture?: React.ClipboardEventHandler<HTMLHeadingElement>;
    onCompositionEnd?: React.CompositionEventHandler<HTMLHeadingElement>;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStart?: React.CompositionEventHandler<HTMLHeadingElement>;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLHeadingElement>;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLHeadingElement>;
    onFocus?: React.FocusEventHandler<HTMLHeadingElement>;
    onFocusCapture?: React.FocusEventHandler<HTMLHeadingElement>;
    onBlur?: React.FocusEventHandler<HTMLHeadingElement>;
    onBlurCapture?: React.FocusEventHandler<HTMLHeadingElement>;
    onChange?: React.FormEventHandler<HTMLHeadingElement>;
    onChangeCapture?: React.FormEventHandler<HTMLHeadingElement>;
    onBeforeInput?: React.FormEventHandler<HTMLHeadingElement>;
    onBeforeInputCapture?: React.FormEventHandler<HTMLHeadingElement>;
    onInput?: React.FormEventHandler<HTMLHeadingElement>;
    onInputCapture?: React.FormEventHandler<HTMLHeadingElement>;
    onReset?: React.FormEventHandler<HTMLHeadingElement>;
    onResetCapture?: React.FormEventHandler<HTMLHeadingElement>;
    onSubmit?: React.FormEventHandler<HTMLHeadingElement>;
    onSubmitCapture?: React.FormEventHandler<HTMLHeadingElement>;
    onInvalid?: React.FormEventHandler<HTMLHeadingElement>;
    onInvalidCapture?: React.FormEventHandler<HTMLHeadingElement>;
    onLoad?: React.ReactEventHandler<HTMLHeadingElement>;
    onLoadCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onError?: React.ReactEventHandler<HTMLHeadingElement>;
    onErrorCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLHeadingElement>;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPress?: React.KeyboardEventHandler<HTMLHeadingElement>;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLHeadingElement>;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLHeadingElement>;
    onAbort?: React.ReactEventHandler<HTMLHeadingElement>;
    onAbortCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onCanPlay?: React.ReactEventHandler<HTMLHeadingElement>;
    onCanPlayCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThrough?: React.ReactEventHandler<HTMLHeadingElement>;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onDurationChange?: React.ReactEventHandler<HTMLHeadingElement>;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onEmptied?: React.ReactEventHandler<HTMLHeadingElement>;
    onEmptiedCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onEncrypted?: React.ReactEventHandler<HTMLHeadingElement>;
    onEncryptedCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onEnded?: React.ReactEventHandler<HTMLHeadingElement>;
    onEndedCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onLoadedData?: React.ReactEventHandler<HTMLHeadingElement>;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadata?: React.ReactEventHandler<HTMLHeadingElement>;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onLoadStart?: React.ReactEventHandler<HTMLHeadingElement>;
    onLoadStartCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onPause?: React.ReactEventHandler<HTMLHeadingElement>;
    onPauseCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onPlay?: React.ReactEventHandler<HTMLHeadingElement>;
    onPlayCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onPlaying?: React.ReactEventHandler<HTMLHeadingElement>;
    onPlayingCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onProgress?: React.ReactEventHandler<HTMLHeadingElement>;
    onProgressCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onRateChange?: React.ReactEventHandler<HTMLHeadingElement>;
    onRateChangeCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onSeeked?: React.ReactEventHandler<HTMLHeadingElement>;
    onSeekedCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onSeeking?: React.ReactEventHandler<HTMLHeadingElement>;
    onSeekingCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onStalled?: React.ReactEventHandler<HTMLHeadingElement>;
    onStalledCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onSuspend?: React.ReactEventHandler<HTMLHeadingElement>;
    onSuspendCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdate?: React.ReactEventHandler<HTMLHeadingElement>;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onVolumeChange?: React.ReactEventHandler<HTMLHeadingElement>;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onWaiting?: React.ReactEventHandler<HTMLHeadingElement>;
    onWaitingCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onAuxClick?: React.MouseEventHandler<HTMLHeadingElement>;
    onAuxClickCapture?: React.MouseEventHandler<HTMLHeadingElement>;
    onClick?: React.MouseEventHandler<HTMLHeadingElement>;
    onClickCapture?: React.MouseEventHandler<HTMLHeadingElement>;
    onContextMenu?: React.MouseEventHandler<HTMLHeadingElement>;
    onContextMenuCapture?: React.MouseEventHandler<HTMLHeadingElement>;
    onDoubleClick?: React.MouseEventHandler<HTMLHeadingElement>;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLHeadingElement>;
    onDrag?: React.DragEventHandler<HTMLHeadingElement>;
    onDragCapture?: React.DragEventHandler<HTMLHeadingElement>;
    onDragEnd?: React.DragEventHandler<HTMLHeadingElement>;
    onDragEndCapture?: React.DragEventHandler<HTMLHeadingElement>;
    onDragEnter?: React.DragEventHandler<HTMLHeadingElement>;
    onDragEnterCapture?: React.DragEventHandler<HTMLHeadingElement>;
    onDragExit?: React.DragEventHandler<HTMLHeadingElement>;
    onDragExitCapture?: React.DragEventHandler<HTMLHeadingElement>;
    onDragLeave?: React.DragEventHandler<HTMLHeadingElement>;
    onDragLeaveCapture?: React.DragEventHandler<HTMLHeadingElement>;
    onDragOver?: React.DragEventHandler<HTMLHeadingElement>;
    onDragOverCapture?: React.DragEventHandler<HTMLHeadingElement>;
    onDragStart?: React.DragEventHandler<HTMLHeadingElement>;
    onDragStartCapture?: React.DragEventHandler<HTMLHeadingElement>;
    onDrop?: React.DragEventHandler<HTMLHeadingElement>;
    onDropCapture?: React.DragEventHandler<HTMLHeadingElement>;
    onMouseDown?: React.MouseEventHandler<HTMLHeadingElement>;
    onMouseDownCapture?: React.MouseEventHandler<HTMLHeadingElement>;
    onMouseEnter?: React.MouseEventHandler<HTMLHeadingElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLHeadingElement>;
    onMouseMove?: React.MouseEventHandler<HTMLHeadingElement>;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLHeadingElement>;
    onMouseOut?: React.MouseEventHandler<HTMLHeadingElement>;
    onMouseOutCapture?: React.MouseEventHandler<HTMLHeadingElement>;
    onMouseOver?: React.MouseEventHandler<HTMLHeadingElement>;
    onMouseOverCapture?: React.MouseEventHandler<HTMLHeadingElement>;
    onMouseUp?: React.MouseEventHandler<HTMLHeadingElement>;
    onMouseUpCapture?: React.MouseEventHandler<HTMLHeadingElement>;
    onSelect?: React.ReactEventHandler<HTMLHeadingElement>;
    onSelectCapture?: React.ReactEventHandler<HTMLHeadingElement>;
    onTouchCancel?: React.TouchEventHandler<HTMLHeadingElement>;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLHeadingElement>;
    onTouchEnd?: React.TouchEventHandler<HTMLHeadingElement>;
    onTouchEndCapture?: React.TouchEventHandler<HTMLHeadingElement>;
    onTouchMove?: React.TouchEventHandler<HTMLHeadingElement>;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLHeadingElement>;
    onTouchStart?: React.TouchEventHandler<HTMLHeadingElement>;
    onTouchStartCapture?: React.TouchEventHandler<HTMLHeadingElement>;
    onPointerDown?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerDownCapture?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerMove?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerUp?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerUpCapture?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerCancel?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerEnter?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerEnterCapture?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerLeave?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerLeaveCapture?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerOver?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerOverCapture?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerOut?: React.PointerEventHandler<HTMLHeadingElement>;
    onPointerOutCapture?: React.PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCapture?: React.PointerEventHandler<HTMLHeadingElement>;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCapture?: React.PointerEventHandler<HTMLHeadingElement>;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLHeadingElement>;
    onScroll?: React.UIEventHandler<HTMLHeadingElement>;
    onScrollCapture?: React.UIEventHandler<HTMLHeadingElement>;
    onWheel?: React.WheelEventHandler<HTMLHeadingElement>;
    onWheelCapture?: React.WheelEventHandler<HTMLHeadingElement>;
    onAnimationStart?: React.AnimationEventHandler<HTMLHeadingElement>;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEnd?: React.AnimationEventHandler<HTMLHeadingElement>;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIteration?: React.AnimationEventHandler<HTMLHeadingElement>;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLHeadingElement>;
    onTransitionEnd?: React.TransitionEventHandler<HTMLHeadingElement>;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLHeadingElement>;
    className: string;
}, HTMLElement>;
export declare namespace Title {
    var displayName: string;
}
//# sourceMappingURL=Title.d.ts.map
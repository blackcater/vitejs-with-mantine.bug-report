{"version":3,"file":"Tabs.js","sources":["../../src/Tabs/Tabs.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { DefaultProps, useMantineTheme } from '@mantine/theme';\nimport { Group, GroupPosition } from '../Group/Group';\nimport { Tab, TabType, TabProps } from './Tab/Tab';\nimport { TabControl } from './TabControl/TabControl';\nimport useStyles from './Tabs.styles';\n\nexport { Tab };\nexport type { TabProps };\n\nfunction clamp(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max);\n}\n\nexport interface TabsProps extends DefaultProps, React.ComponentPropsWithoutRef<'div'> {\n  /** <Tab /> components only */\n  children: React.ReactNode;\n\n  /** index of initial tab */\n  initialTab?: number;\n\n  /** index of active tab, overrides internal state */\n  active?: number;\n\n  /** active tab color from theme */\n  color?: string;\n\n  /** true if tabs should take all available space */\n  grow?: boolean;\n\n  /** tab controls position */\n  position?: GroupPosition;\n\n  /** called when tab control is clicked with tab index */\n  onTabChange?(tabIndex: number): void;\n}\n\nfunction getPreviousTab(active: number, tabs: TabType[]) {\n  for (let i = active - 1; i >= 0; i -= 1) {\n    if (!tabs[i].props.disabled) {\n      return i;\n    }\n  }\n\n  return active;\n}\n\nfunction getNextTab(active: number, tabs: TabType[]) {\n  for (let i = active + 1; i < tabs.length; i += 1) {\n    if (!tabs[i].props.disabled) {\n      return i;\n    }\n  }\n\n  return active;\n}\n\nfunction findInitialTab(tabs: TabType[]) {\n  for (let i = 0; i < tabs.length; i += 1) {\n    if (!tabs[i].props.disabled) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nexport function Tabs({\n  children,\n  initialTab,\n  themeOverride,\n  active,\n  position = 'left',\n  grow = false,\n  onTabChange,\n  color,\n  ...others\n}: TabsProps) {\n  const classes = useStyles({ theme: useMantineTheme(themeOverride) });\n\n  const controlRefs = useRef<Record<string, HTMLButtonElement>>({});\n\n  const tabs = React.Children.toArray(children).filter(\n    (item: TabType) => item.type === Tab\n  ) as TabType[];\n\n  const [_activeTab, _setActiveTab] = useState(\n    typeof initialTab === 'number' ? initialTab : findInitialTab(tabs)\n  );\n  const activeTab = clamp(typeof active === 'number' ? active : _activeTab, 0, tabs.length - 1);\n  const setActiveTab = (tabIndex: number) => {\n    _setActiveTab(tabIndex);\n\n    if (typeof onTabChange === 'function') {\n      onTabChange(tabIndex);\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLButtonElement>) => {\n    if (event.nativeEvent.code === 'ArrowRight') {\n      const nextTab = getNextTab(activeTab, tabs);\n      setActiveTab(nextTab);\n      controlRefs.current[nextTab].focus();\n    }\n\n    if (event.nativeEvent.code === 'ArrowLeft') {\n      const previousTab = getPreviousTab(activeTab, tabs);\n      setActiveTab(previousTab);\n      controlRefs.current[previousTab].focus();\n    }\n  };\n\n  const panes = tabs.map((tab, index) => (\n    <TabControl\n      key={index}\n      active={activeTab === index}\n      tabProps={tab.props}\n      onKeyDown={handleKeyDown}\n      color={color}\n      elementRef={(node) => {\n        controlRefs.current[index] = node;\n      }}\n      onClick={() => activeTab !== index && setActiveTab(index)}\n    />\n  ));\n\n  const content = tabs[activeTab].props.children;\n\n  return (\n    <div {...others}>\n      <div className={classes.tabs}>\n        <Group\n          className={classes.tabsInner}\n          role=\"tablist\"\n          aria-orientation=\"horizontal\"\n          spacing={0}\n          position={position}\n          grow={grow}\n        >\n          {panes}\n        </Group>\n      </div>\n\n      {content && (\n        <div data-mantine-tab-content className={classes.body} role=\"tabpanel\">\n          {content}\n        </div>\n      )}\n    </div>\n  );\n}\n\nTabs.displayName = '@mantine/core/Tabs';\n"],"names":["useStyles","useMantineTheme","useRef","React","Tab","useState","TabControl","Group"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,eAAe,OAAe,KAAa,KAAa;AACtD,SAAO,KAAK,IAAI,KAAK,IAAI,OAAO,MAAM;AAAA;AA0BxC,wBAAwB,QAAgB,MAAiB;AACvD,WAAS,IAAI,SAAS,GAAG,KAAK,GAAG,KAAK,GAAG;AACvC,QAAI,CAAC,KAAK,GAAG,MAAM,UAAU;AAC3B,aAAO;AAAA;AAAA;AAIX,SAAO;AAAA;AAGT,oBAAoB,QAAgB,MAAiB;AACnD,WAAS,IAAI,SAAS,GAAG,IAAI,KAAK,QAAQ,KAAK,GAAG;AAChD,QAAI,CAAC,KAAK,GAAG,MAAM,UAAU;AAC3B,aAAO;AAAA;AAAA;AAIX,SAAO;AAAA;AAGT,wBAAwB,MAAiB;AACvC,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK,GAAG;AACvC,QAAI,CAAC,KAAK,GAAG,MAAM,UAAU;AAC3B,aAAO;AAAA;AAAA;AAIX,SAAO;AAAA;cAGY,IAUP;AAVO,eACnB;AAAA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW;AAAA,IACX,OAAO;AAAA,IACP;AAAA,IACA;AAAA,MARmB,IAShB,mBATgB,IAShB;AAAA,IARH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAGA,QAAM,UAAUA,uBAAU,CAAE,OAAOC,sBAAgB;AAEnD,QAAM,cAAcC,aAA0C;AAE9D,QAAM,OAAOC,eAAM,SAAS,QAAQ,UAAU,OAC5C,CAAC,SAAkB,KAAK,SAASC;AAGnC,QAAM,CAAC,YAAY,iBAAiBC,eAClC,OAAO,eAAe,WAAW,aAAa,eAAe;AAE/D,QAAM,YAAY,MAAM,OAAO,WAAW,WAAW,SAAS,YAAY,GAAG,KAAK,SAAS;AAC3F,QAAM,eAAe,CAAC,aAAqB;AACzC,kBAAc;AAEd,QAAI,OAAO,gBAAgB,YAAY;AACrC,kBAAY;AAAA;AAAA;AAIhB,QAAM,gBAAgB,CAAC,UAAkD;AACvE,QAAI,MAAM,YAAY,SAAS,cAAc;AAC3C,YAAM,UAAU,WAAW,WAAW;AACtC,mBAAa;AACb,kBAAY,QAAQ,SAAS;AAAA;AAG/B,QAAI,MAAM,YAAY,SAAS,aAAa;AAC1C,YAAM,cAAc,eAAe,WAAW;AAC9C,mBAAa;AACb,kBAAY,QAAQ,aAAa;AAAA;AAAA;AAIrC,QAAM,QAAQ,KAAK,IAAI,CAAC,KAAK,uDAC1BC,uBAAD;AAAA,IACE,KAAK;AAAA,IACL,QAAQ,cAAc;AAAA,IACtB,UAAU,IAAI;AAAA,IACd,WAAW;AAAA,IACX;AAAA,IACA,YAAY,CAAC,SAAS;AACpB,kBAAY,QAAQ,SAAS;AAAA;AAAA,IAE/B,SAAS,MAAM,cAAc,SAAS,aAAa;AAAA;AAIvD,QAAM,UAAU,KAAK,WAAW,MAAM;AAEtC,sDACG,OAAD,mBAAS,sDACN,OAAD;AAAA,IAAK,WAAW,QAAQ;AAAA,kDACrBC,aAAD;AAAA,IACE,WAAW,QAAQ;AAAA,IACnB,MAAK;AAAA,IACL,oBAAiB;AAAA,IACjB,SAAS;AAAA,IACT;AAAA,IACA;AAAA,KAEC,SAIJ,wDACE,OAAD;AAAA,IAAK,4BAAwB;AAAA,IAAC,WAAW,QAAQ;AAAA,IAAM,MAAK;AAAA,KACzD;AAAA;AAOX,KAAK,cAAc;;;;;"}
{"version":3,"file":"use-focus-trap.js","sources":["../../src/use-focus-trap/use-focus-trap.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport {\n  markForFocusLater,\n  returnFocus,\n  setupScopedFocus,\n  teardownScopedFocus,\n} from './focus-manager';\nimport { FOCUS_SELECTOR, focusable, tabbable } from './tabbable';\nimport { scopeTab } from './scope-tab';\nimport { createAriaHider } from './create-aria-hider';\n\nexport function useFocusTrap(active = true): (instance: HTMLElement) => void {\n  const ref = useRef<HTMLElement | null>();\n  const restoreAria = useRef<Function | null>(null);\n\n  const setRef = useCallback(\n    (node: HTMLElement | null) => {\n      if (restoreAria.current) {\n        restoreAria.current();\n      }\n      if (ref.current) {\n        returnFocus();\n        teardownScopedFocus();\n      }\n      if (active && node) {\n        setupScopedFocus(node);\n        markForFocusLater();\n\n        const processNode = (_node: HTMLElement) => {\n          restoreAria.current = createAriaHider(_node);\n\n          let focusElement: HTMLElement | null = null;\n\n          if (!focusElement) {\n            const children = Array.from<HTMLElement>(node.querySelectorAll(FOCUS_SELECTOR));\n            focusElement = children.find(tabbable) || children.find(focusable) || null;\n            if (!focusElement && focusable(node)) focusElement = node;\n          }\n\n          if (focusElement) {\n            focusElement.focus();\n          } else if (process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.warn(\n              '[@mantine/hooks/use-focus-trap] Failed to find focusable element within provided node',\n              node\n            );\n          }\n        };\n\n        // Delay processing the HTML node by a frame. This ensures focus is assigned correctly.\n        setTimeout(() => {\n          if (node.ownerDocument) {\n            processNode(node);\n          } else if (process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.warn('[@mantine/hooks/use-focus-trap] Ref node is not part of the dom', node);\n          }\n        });\n\n        ref.current = node;\n      } else {\n        ref.current = null;\n      }\n    },\n    [active]\n  );\n\n  useEffect(() => {\n    if (!active) return undefined;\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Tab' && ref.current) {\n        scopeTab(ref.current, event);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [active]);\n\n  return setRef;\n}\n"],"names":["useRef","useCallback","createAriaHider","FOCUS_SELECTOR","tabbable","focusable"],"mappings":";;;;;;;;;;sBAW6B,SAAS,MAAuC;AAC3E,QAAM,MAAMA;AACZ,QAAM,cAAcA,aAAwB;AAE5C,QAAM,SAASC,kBACb,CAAC,SAA6B;AAC5B,QAAI,YAAY,SAAS;AACvB,kBAAY;AAAA;AAEd,QAAI,IAAI,SAAS;AACf;AACA;AAAA;AAEF,QAAI,UAAU,MAAM;AAClB,oCAAiB;AACjB;AAEA,YAAM,cAAc,CAAC,UAAuB;AAC1C,oBAAY,UAAUC,gCAAgB;AAEtC,YAAI,eAAmC;AAEvC,YAAI,CAAC,cAAc;AACjB,gBAAM,WAAW,MAAM,KAAkB,KAAK,iBAAiBC;AAC/D,yBAAe,SAAS,KAAKC,sBAAa,SAAS,KAAKC,uBAAc;AACtE,cAAI,CAAC,gBAAgBA,mBAAU;AAAO,2BAAe;AAAA;AAGvD,YAAI,cAAc;AAChB,uBAAa;AAAA,mBACJ,QAAQ,IAAI,aAAa,eAAe;AAEjD,kBAAQ,KACN,yFACA;AAAA;AAAA;AAMN,iBAAW,MAAM;AACf,YAAI,KAAK,eAAe;AACtB,sBAAY;AAAA,mBACH,QAAQ,IAAI,aAAa,eAAe;AAEjD,kBAAQ,KAAK,mEAAmE;AAAA;AAAA;AAIpF,UAAI,UAAU;AAAA,WACT;AACL,UAAI,UAAU;AAAA;AAAA,KAGlB,CAAC;AAGH,kBAAU,MAAM;AACd,QAAI,CAAC;AAAQ,aAAO;AACpB,UAAM,gBAAgB,CAAC,UAAyB;AAC9C,UAAI,MAAM,QAAQ,SAAS,IAAI,SAAS;AACtC,0BAAS,IAAI,SAAS;AAAA;AAAA;AAI1B,aAAS,iBAAiB,WAAW;AACrC,WAAO,MAAM;AACX,eAAS,oBAAoB,WAAW;AAAA;AAAA,KAEzC,CAAC;AAEJ,SAAO;AAAA;;;;"}
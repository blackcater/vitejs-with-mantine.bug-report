{"version":3,"file":"use-local-storage-value.js","sources":["../../src/use-local-storage-value/use-local-storage-value.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event';\n\nexport function useLocalStorageValue<T extends string>({\n  key,\n  defaultValue = undefined,\n}: {\n  key: string;\n  defaultValue?: T;\n}) {\n  const [value, setValue] = useState<T>(\n    typeof window !== 'undefined' && 'localStorage' in window\n      ? (window.localStorage.getItem(key) as T)\n      : ((defaultValue ?? '') as T)\n  );\n\n  const setLocalStorageValue = useCallback(\n    (val: T | ((prevState: T) => T)) => {\n      if (typeof val === 'function') {\n        setValue((current) => {\n          const result = val(current);\n          window.localStorage.setItem(key, result);\n          return result;\n        });\n      } else {\n        window.localStorage.setItem(key, val);\n        setValue(val);\n      }\n    },\n    [key]\n  );\n\n  useWindowEvent('storage', (event) => {\n    if (event.storageArea === window.localStorage && event.key === key) {\n      setValue(event.newValue as T);\n    }\n  });\n\n  useEffect(() => {\n    if (defaultValue && !value) {\n      setLocalStorageValue(defaultValue);\n    }\n  }, [defaultValue, value, setLocalStorageValue]);\n\n  return [value, setLocalStorageValue] as const;\n}\n"],"names":["useState","useCallback"],"mappings":";;;;;;;8BAGuD;AAAA,EACrD;AAAA,EACA,eAAe;AAAA,GAId;AACD,QAAM,CAAC,OAAO,YAAYA,eACxB,OAAO,WAAW,eAAe,kBAAkB,SAC9C,OAAO,aAAa,QAAQ,OAC3B,sCAAgB;AAGxB,QAAM,uBAAuBC,kBAC3B,CAAC,QAAmC;AAClC,QAAI,OAAO,QAAQ,YAAY;AAC7B,eAAS,CAAC,YAAY;AACpB,cAAM,SAAS,IAAI;AACnB,eAAO,aAAa,QAAQ,KAAK;AACjC,eAAO;AAAA;AAAA,WAEJ;AACL,aAAO,aAAa,QAAQ,KAAK;AACjC,eAAS;AAAA;AAAA,KAGb,CAAC;AAGH,gCAAe,WAAW,CAAC,UAAU;AACnC,QAAI,MAAM,gBAAgB,OAAO,gBAAgB,MAAM,QAAQ,KAAK;AAClE,eAAS,MAAM;AAAA;AAAA;AAInB,kBAAU,MAAM;AACd,QAAI,gBAAgB,CAAC,OAAO;AAC1B,2BAAqB;AAAA;AAAA,KAEtB,CAAC,cAAc,OAAO;AAEzB,SAAO,CAAC,OAAO;AAAA;;;;"}
{"version":3,"file":"TagsList.js","sources":["../../src/TagsList/TagsList.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'clsx';\nimport { useFocusTrap } from '@mantine/hooks';\nimport {\n  TextInput,\n  Text,\n  Badge,\n  MantineThemeOverride,\n  useMantineTheme,\n  MantineTransition,\n} from '@mantine/core';\nimport { TagPickerColor, TagPickerTag } from '../types';\nimport { TagItem } from '../TagItem/TagItem';\nimport useStyles from './TagsList.styles';\n\nexport interface TagsListProps {\n  description?: string;\n  searchPlaceholder?: string;\n  searchQuery: string;\n  hovered: number;\n  value: TagPickerTag;\n  data: TagPickerTag[];\n  canCreate: boolean;\n  createLabel?: string;\n  tagNameEditLabel?: string;\n  saveLabel?: string;\n  deleteLabel?: string;\n  editTagLabel?: string;\n  colors: TagPickerColor[];\n  createColor: string;\n  onSearchChange(query: string): void;\n  onCreate(): void;\n  onTagUpdate(id: string, values: Omit<TagPickerTag, 'id'>): void;\n  onTagDelete(id: string): void;\n  onChange(value: TagPickerTag): void;\n  onHoveredChange(index: number): void;\n  onEventsCaptureChange(shouldCaptureEvents: boolean): void;\n  onArrowsCaptureChange(shouldCaptureArrowEvents: boolean): void;\n  themeOverride?: MantineThemeOverride;\n  enableCreate?: boolean;\n  enableUpdate?: boolean;\n  enableDelete?: boolean;\n  enableColorChange?: boolean;\n  transitionDuration?: number;\n  transition?: MantineTransition;\n  transitionTimingFunction?: string;\n}\n\nexport function TagsList({\n  searchQuery,\n  searchPlaceholder,\n  description,\n  hovered,\n  data,\n  value,\n  canCreate,\n  createLabel,\n  deleteLabel,\n  saveLabel,\n  editTagLabel,\n  tagNameEditLabel,\n  colors,\n  createColor,\n  onSearchChange,\n  onCreate,\n  onTagDelete,\n  onTagUpdate,\n  onChange,\n  onHoveredChange,\n  onEventsCaptureChange,\n  onArrowsCaptureChange,\n  themeOverride,\n  enableCreate,\n  enableUpdate,\n  enableDelete,\n  enableColorChange,\n  transitionDuration,\n  transition,\n  transitionTimingFunction,\n}: TagsListProps) {\n  const classes = useStyles({ theme: useMantineTheme(themeOverride) });\n  const focusTrapRef = useFocusTrap();\n\n  const tags = data.map((tag, index) => (\n    <TagItem\n      key={tag.id}\n      index={index}\n      hovered={hovered}\n      data={tag}\n      selected={value}\n      saveLabel={saveLabel}\n      tagNameEditLabel={tagNameEditLabel}\n      editTagLabel={editTagLabel}\n      onSelect={onChange}\n      onTagUpdate={onTagUpdate}\n      onHover={onHoveredChange}\n      colors={colors}\n      deleteLabel={deleteLabel}\n      onTagDelete={onTagDelete}\n      onEventsCaptureChange={onEventsCaptureChange}\n      enableUpdate={enableUpdate}\n      enableDelete={enableDelete}\n      enableColorChange={enableColorChange}\n      transition={transition}\n      transitionTimingFunction={transitionTimingFunction}\n      transitionDuration={transitionDuration}\n      themeOverride={themeOverride}\n    />\n  ));\n\n  return (\n    <div className={classes.tagsList} ref={focusTrapRef} role=\"listbox\">\n      <TextInput\n        themeOverride={themeOverride}\n        className={classes.searchInput}\n        placeholder={searchPlaceholder}\n        value={searchQuery}\n        onChange={(event) => onSearchChange(event.currentTarget.value)}\n        onFocus={() => onArrowsCaptureChange(true)}\n        onBlur={() => {\n          onHoveredChange(-1);\n          onArrowsCaptureChange(false);\n        }}\n      />\n\n      {description && (\n        <Text color=\"gray\" size=\"sm\" className={classes.description} themeOverride={themeOverride}>\n          {description}\n        </Text>\n      )}\n\n      <div>\n        {tags}\n\n        {enableCreate && canCreate && (\n          <button\n            className={cx(classes.createControl, {\n              [classes.createControlHovered]: hovered === data.length,\n            })}\n            type=\"button\"\n            onClick={onCreate}\n            onMouseEnter={() => onHoveredChange(data.length)}\n          >\n            <span className={classes.createControlLabel}>{createLabel || '+'}</span>\n            <Badge\n              variant=\"light\"\n              className={classes.createControlBadge}\n              color={createColor}\n              style={{ cursor: 'pointer' }}\n              themeOverride={themeOverride}\n            >\n              {searchQuery}\n            </Badge>\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nTagsList.displayName = '@mantine/tag-picker/TagsList';\n"],"names":["useStyles","useMantineTheme","useFocusTrap","TagItem","TextInput","Text","cx","Badge"],"mappings":";;;;;;;;;;;;;;;;kBAgDyB;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GACgB;AAChB,QAAM,UAAUA,2BAAU,CAAE,OAAOC,qBAAgB;AACnD,QAAM,eAAeC;AAErB,QAAM,OAAO,KAAK,IAAI,CAAC,KAAK,kEACzBC,iBAAD;AAAA,IACE,KAAK,IAAI;AAAA,IACT;AAAA,IACA;AAAA,IACA,MAAM;AAAA,IACN,UAAU;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAIJ,iEACG,OAAD;AAAA,IAAK,WAAW,QAAQ;AAAA,IAAU,KAAK;AAAA,IAAc,MAAK;AAAA,6DACvDC,gBAAD;AAAA,IACE;AAAA,IACA,WAAW,QAAQ;AAAA,IACnB,aAAa;AAAA,IACb,OAAO;AAAA,IACP,UAAU,CAAC,UAAU,eAAe,MAAM,cAAc;AAAA,IACxD,SAAS,MAAM,sBAAsB;AAAA,IACrC,QAAQ,MAAM;AACZ,sBAAgB;AAChB,4BAAsB;AAAA;AAAA,MAIzB,uEACEC,WAAD;AAAA,IAAM,OAAM;AAAA,IAAO,MAAK;AAAA,IAAK,WAAW,QAAQ;AAAA,IAAa;AAAA,KAC1D,sEAIJ,OAAD,MACG,MAEA,gBAAgB,qEACd,UAAD;AAAA,IACE,WAAWC,uBAAG,QAAQ,eAAe;AAAA,OAClC,QAAQ,uBAAuB,YAAY,KAAK;AAAA;AAAA,IAEnD,MAAK;AAAA,IACL,SAAS;AAAA,IACT,cAAc,MAAM,gBAAgB,KAAK;AAAA,6DAExC,QAAD;AAAA,IAAM,WAAW,QAAQ;AAAA,KAAqB,eAAe,8DAC5DC,YAAD;AAAA,IACE,SAAQ;AAAA,IACR,WAAW,QAAQ;AAAA,IACnB,OAAO;AAAA,IACP,OAAO,CAAE,QAAQ;AAAA,IACjB;AAAA,KAEC;AAAA;AASf,SAAS,cAAc;;;;"}
{"version":3,"file":"TagPickerContainer.js","sources":["../src/TagPickerContainer.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport { DefaultProps, MantineTransition } from '@mantine/core';\nimport { TagPickerTag, TagPickerColor } from './types';\nimport { TagPicker } from './TagPicker/TagPicker';\n\nfunction getRandomColor(colors: TagPickerColor[]) {\n  if (Array.isArray(colors)) {\n    return colors[Math.floor(Math.random() * colors.length)].color;\n  }\n\n  return null;\n}\n\nexport interface TagPickerProps extends DefaultProps {\n  /** Options which should be rendered in the dropdown list */\n  data: TagPickerTag[];\n\n  /** Currently selected tag */\n  value?: TagPickerTag;\n\n  /** Called when user selects tag */\n  onChange(value: TagPickerTag): void;\n\n  /** Possible colors which tag can have */\n  colors?: TagPickerColor[];\n\n  /** Description displayed after search input */\n  description?: string;\n\n  /** Label for create control */\n  createLabel?: string;\n\n  /** Label for delete control */\n  deleteLabel?: string;\n\n  /** aria-label for save control */\n  saveLabel?: string;\n\n  /** aria-label for tag name edit field */\n  tagNameEditLabel?: string;\n\n  /** aria-label for edit tag control */\n  editTagLabel?: string;\n\n  /** aria-labelledby attribute for button control */\n  labelledBy?: string;\n\n  /** Set id on control, use it to connect with label */\n  controlId?: string;\n\n  /** Tag with this value is displayed when value prop is null */\n  noValueLabel: string;\n\n  /** Search field placeholder */\n  searchPlaceholder?: string;\n\n  /** Enable user to create new tags */\n  enableCreate?: boolean;\n\n  /** Enable user to update existing tags */\n  enableUpdate?: boolean;\n\n  /** Enable user to delete existing tags */\n  enableDelete?: boolean;\n\n  /** Enable user to change tag colors */\n  enableColorChange?: boolean;\n\n  /** Mount/unmount transitions for all dropdowns */\n  transition?: MantineTransition;\n\n  /** Mount/unmount transitions transitionTimingFunction, defaults to theme.transitionTimingFunction */\n  transitionTimingFunction?: string;\n\n  /** Mount/unmount transition duration for all dropdowns */\n  transitionDuration?: number;\n\n  /** Called when dropdown opens */\n  onDropdownOpen?(): void;\n\n  /** Called when dropdown closes */\n  onDropdownClose?(): void;\n\n  /** Called when search changes */\n  onSearchChange?(query: string): void;\n\n  /** Get control ref */\n  controlRef?: React.RefCallback<HTMLButtonElement>;\n\n  /** Called when user creates new tag */\n  onTagCreate?(values: Omit<TagPickerTag, 'id'>): TagPickerTag;\n\n  /** Called when user deletes tag */\n  onTagDelete?(id: string): void;\n\n  /** Called when user updates tag */\n  onTagUpdate?(id: string, values: Omit<TagPickerTag, 'id'>): void;\n}\n\nexport function TagPickerContainer({ transitionDuration = 250, ...props }: TagPickerProps) {\n  const controlRef = useRef<HTMLButtonElement>();\n  const [dropdownOpened, setDropdownOpened] = useState(false);\n  const [hovered, setHovered] = useState(-1);\n  const [query, setQuery] = useState('');\n  const [createColor, setCreateColor] = useState(getRandomColor(props.colors));\n  const [shouldCaptureEvents, setShouldCaptureEvents] = useState(true);\n  const [shouldCaptureArrowEvents, setShouldCaptureArrowEvents] = useState(true);\n\n  const closeDropdown = () => {\n    if (shouldCaptureEvents) {\n      setDropdownOpened(false);\n      setHovered(-1);\n      setQuery('');\n      setTimeout(() => controlRef.current.focus(), transitionDuration + 35);\n      typeof props.onDropdownClose === 'function' && props.onDropdownClose();\n    }\n  };\n\n  const openDropdown = () => {\n    setDropdownOpened(true);\n    typeof props.onDropdownOpen === 'function' && props.onDropdownOpen();\n  };\n\n  const handleSearchChange = (value: string) => {\n    setQuery(value);\n    setHovered(0);\n    typeof props.onSearchChange === 'function' && props.onSearchChange(value);\n  };\n\n  const handleCreate = () => {\n    props.onChange(props.onTagCreate({ color: createColor, name: query }));\n    setCreateColor(getRandomColor(props.colors));\n    closeDropdown();\n  };\n\n  const handleUpdate = (id: string, values: Omit<TagPickerTag, 'id'>) => {\n    if (props.value && props.value.id === id) {\n      props.onChange({ ...values, id });\n    }\n\n    props.onTagUpdate(id, values);\n  };\n\n  const handleChange = (value: TagPickerTag) => {\n    props.onChange(value);\n    closeDropdown();\n  };\n\n  const filteredData = props.data.filter((tag) =>\n    tag.name.toLowerCase().trim().includes(query.toLowerCase().trim())\n  );\n\n  const canCreate =\n    query.trim().length > 0 &&\n    props.data.every((tag) => tag.name.toLowerCase().trim() !== query.trim().toLowerCase());\n\n  const handleKeyboardEvents = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (dropdownOpened && shouldCaptureEvents) {\n      const { code } = event.nativeEvent;\n\n      if (code === 'Escape') {\n        event.preventDefault();\n        closeDropdown();\n      }\n\n      if (code === 'ArrowUp' && shouldCaptureArrowEvents) {\n        event.preventDefault();\n        const targetIndex = canCreate ? filteredData.length : filteredData.length - 1;\n        setHovered(hovered <= 0 ? targetIndex : hovered - 1);\n      }\n\n      if (code === 'ArrowDown' && shouldCaptureArrowEvents) {\n        event.preventDefault();\n        const targetIndex = canCreate ? hovered : hovered + 1;\n        setHovered(targetIndex === filteredData.length ? 0 : hovered + 1);\n      }\n\n      if (code === 'Enter' && hovered > -1) {\n        event.preventDefault();\n\n        if (filteredData[hovered]) {\n          handleChange(filteredData[hovered]);\n          closeDropdown();\n        }\n\n        if (canCreate && hovered === filteredData.length) {\n          handleCreate();\n        }\n      }\n    }\n  };\n\n  return (\n    <div onKeyDownCapture={handleKeyboardEvents} className={props.className} style={props.style}>\n      <TagPicker\n        createColor={createColor}\n        searchQuery={query}\n        hovered={hovered}\n        dropdownOpened={dropdownOpened}\n        controlRef={(node: HTMLButtonElement) => {\n          controlRef.current = node;\n          typeof props.controlRef === 'function' && props.controlRef(node);\n        }}\n        openDropdown={openDropdown}\n        closeDropdown={closeDropdown}\n        description={props.description}\n        searchPlaceholder={props.searchPlaceholder}\n        onSearchChange={handleSearchChange}\n        data={filteredData}\n        canCreate={canCreate}\n        value={props.value}\n        createLabel={props.createLabel}\n        saveLabel={props.saveLabel}\n        editTagLabel={props.editTagLabel}\n        deleteLabel={props.deleteLabel}\n        noValueLabel={props.noValueLabel}\n        tagNameEditLabel={props.tagNameEditLabel}\n        onCreate={handleCreate}\n        colors={props.colors}\n        onTagUpdate={handleUpdate}\n        onTagDelete={props.onTagDelete}\n        onChange={handleChange}\n        onHoveredChange={setHovered}\n        onEventsCaptureChange={setShouldCaptureEvents}\n        onArrowsCaptureChange={setShouldCaptureArrowEvents}\n        enableCreate={props.enableCreate}\n        enableUpdate={props.enableUpdate}\n        enableDelete={props.enableDelete}\n        enableColorChange={props.enableColorChange}\n        transitionDuration={transitionDuration}\n        transition={props.transition}\n        transitionTimingFunction={props.transitionTimingFunction}\n        themeOverride={props.themeOverride}\n      />\n    </div>\n  );\n}\n"],"names":["useRef","useState","TagPicker"],"mappings":"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"}
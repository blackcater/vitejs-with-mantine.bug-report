{"version":3,"file":"TagItem.js","sources":["../../src/TagItem/TagItem.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport cx from 'clsx';\nimport {\n  ActionIcon,\n  Transition,\n  Badge,\n  useMantineTheme,\n  MantineThemeOverride,\n  MantineTransition,\n} from '@mantine/core';\nimport { useReducedMotion } from '@mantine/hooks';\nimport { TagPickerColor, TagPickerTag } from '../types';\nimport { MenuIcon } from './MenuIcon';\nimport { TagEdit } from '../TagEdit/TagEdit';\nimport useStyles from './TagItem.styles';\n\nexport interface TagItemProps {\n  index: number;\n  hovered: number;\n  data: TagPickerTag;\n  selected?: TagPickerTag;\n  colors: TagPickerColor[];\n  deleteLabel: string;\n  tagNameEditLabel?: string;\n  saveLabel: string;\n  editTagLabel: string;\n  onSelect(value: TagPickerTag): void;\n  onTagUpdate(id: string, values: Omit<TagPickerTag, 'id'>): void;\n  onTagDelete(id: string): void;\n  onHover(index: number): void;\n  onEventsCaptureChange(shouldCaptureEvents: boolean): void;\n  themeOverride?: MantineThemeOverride;\n  enableUpdate?: boolean;\n  enableDelete?: boolean;\n  enableColorChange?: boolean;\n  transitionDuration?: number;\n  transition?: MantineTransition;\n  transitionTimingFunction: string;\n}\n\nexport function TagItem({\n  index,\n  hovered,\n  data,\n  onSelect,\n  onTagUpdate,\n  onHover,\n  deleteLabel,\n  saveLabel,\n  editTagLabel,\n  tagNameEditLabel,\n  colors,\n  selected,\n  onTagDelete,\n  onEventsCaptureChange,\n  themeOverride,\n  enableUpdate,\n  enableDelete,\n  enableColorChange,\n  transitionDuration,\n  transition = 'skew-up',\n  transitionTimingFunction,\n}: TagItemProps) {\n  const classes = useStyles({ theme: useMantineTheme(themeOverride) });\n  const controlRef = useRef<HTMLButtonElement>();\n  const [editDropdownOpened, setEditDropdownOpened] = useState(false);\n  const reduceMotion = useReducedMotion();\n  const duration = reduceMotion ? 1 : transitionDuration;\n\n  const openEditDropdown = () => {\n    setEditDropdownOpened(true);\n    onEventsCaptureChange(false);\n  };\n\n  const closeEditDropdown = () => {\n    setEditDropdownOpened(false);\n    onEventsCaptureChange(true);\n\n    // Focus should be wrapped in setTimeout to prevent multiple keyboard events capturing\n    // since edit dropdown has focus trap, control cannot be focused until transition ended + 10ms for buffer\n    setTimeout(() => {\n      controlRef.current.focus();\n    }, transitionDuration + 35);\n  };\n\n  return (\n    <div\n      className={cx(classes.item, { [classes.hovered]: hovered === index })}\n      onMouseEnter={() => onHover(index)}\n    >\n      <Transition\n        duration={duration}\n        mounted={editDropdownOpened}\n        transition={transition}\n        timingFunction={transitionTimingFunction}\n        themeOverride={themeOverride}\n      >\n        {(transitionStyles) => (\n          <TagEdit\n            style={transitionStyles}\n            saveLabel={saveLabel}\n            tagNameEditLabel={tagNameEditLabel}\n            onClose={closeEditDropdown}\n            initialValues={data}\n            deleteLabel={deleteLabel}\n            colors={colors}\n            onTagUpdate={onTagUpdate}\n            onTagDelete={onTagDelete}\n            id={data.id}\n            enableDelete={enableDelete}\n            enableColorChange={enableColorChange}\n            themeOverride={themeOverride}\n          />\n        )}\n      </Transition>\n\n      <div className={classes.body}>\n        <button\n          role=\"option\"\n          type=\"button\"\n          aria-selected={!!selected && data.id === selected.id}\n          className={classes.control}\n          onClick={() => onSelect(data)}\n        >\n          <div className={classes.controlInner}>\n            <Badge\n              variant=\"light\"\n              className={classes.badge}\n              color={data.color}\n              fullWidth\n              style={{ cursor: 'pointer' }}\n              themeOverride={themeOverride}\n            >\n              {data.name}\n            </Badge>\n          </div>\n        </button>\n\n        {enableUpdate && (\n          <ActionIcon\n            onClick={openEditDropdown}\n            elementRef={controlRef}\n            themeOverride={themeOverride}\n            aria-label={editTagLabel}\n          >\n            <MenuIcon />\n          </ActionIcon>\n        )}\n      </div>\n    </div>\n  );\n}\n\nTagItem.displayName = '@mantine/tag-picker/TagItem';\n"],"names":[],"mappings":";;;;;;;;iBAwCwB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb;AAAA,GACe;AACf,QAAM,UAAU,UAAU,CAAE,OAAO,gBAAgB;AACnD,QAAM,aAAa;AACnB,QAAM,CAAC,oBAAoB,yBAAyB,SAAS;AAC7D,QAAM,eAAe;AACrB,QAAM,WAAW,eAAe,IAAI;AAEpC,QAAM,mBAAmB,MAAM;AAC7B,0BAAsB;AACtB,0BAAsB;AAAA;AAGxB,QAAM,oBAAoB,MAAM;AAC9B,0BAAsB;AACtB,0BAAsB;AAItB,eAAW,MAAM;AACf,iBAAW,QAAQ;AAAA,OAClB,qBAAqB;AAAA;AAG1B,6CACG,OAAD;AAAA,IACE,WAAW,GAAG,QAAQ,MAAM,EAAG,QAAQ,UAAU,YAAY;AAAA,IAC7D,cAAc,MAAM,QAAQ;AAAA,yCAE3B,YAAD;AAAA,IACE;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA,gBAAgB;AAAA,IAChB;AAAA,KAEC,CAAC,yDACC,SAAD;AAAA,IACE,OAAO;AAAA,IACP;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT,eAAe;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,IAAI,KAAK;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,2CAKL,OAAD;AAAA,IAAK,WAAW,QAAQ;AAAA,yCACrB,UAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,iBAAe,CAAC,CAAC,YAAY,KAAK,OAAO,SAAS;AAAA,IAClD,WAAW,QAAQ;AAAA,IACnB,SAAS,MAAM,SAAS;AAAA,yCAEvB,OAAD;AAAA,IAAK,WAAW,QAAQ;AAAA,yCACrB,OAAD;AAAA,IACE,SAAQ;AAAA,IACR,WAAW,QAAQ;AAAA,IACnB,OAAO,KAAK;AAAA,IACZ,WAAS;AAAA,IACT,OAAO,CAAE,QAAQ;AAAA,IACjB;AAAA,KAEC,KAAK,SAKX,oDACE,YAAD;AAAA,IACE,SAAS;AAAA,IACT,YAAY;AAAA,IACZ;AAAA,IACA,cAAY;AAAA,yCAEX,UAAD;AAAA;AAQZ,QAAQ,cAAc;;;;"}
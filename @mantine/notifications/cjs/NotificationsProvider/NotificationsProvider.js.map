{"version":3,"file":"NotificationsProvider.js","sources":["../../src/NotificationsProvider/NotificationsProvider.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'clsx';\nimport { Transition, TransitionGroup } from 'react-transition-group';\nimport { DefaultProps, useMantineTheme, Portal } from '@mantine/core';\nimport { useReducedMotion } from '@mantine/hooks';\nimport { NotificationsContext } from '../Notifications.context';\nimport { NotificationsProviderPositioning } from '../types';\nimport getPositionStyles from './get-position-styles/get-position-styles';\nimport getNotificationStateStyles from './get-notification-state-styles/get-notification-state-styles';\nimport NotificationContainer from '../NotificationContainer/NotificationContainer';\nimport useStyles from './NotificationsProvider.styles';\nimport useNotificationsState from './use-notifications-state/use-notifications-state';\n\nconst POSITIONS = [\n  'top-left',\n  'top-right',\n  'top-center',\n  'bottom-left',\n  'bottom-right',\n  'bottom-center',\n] as const;\n\nexport interface NotificationProviderProps\n  extends DefaultProps,\n    React.ComponentPropsWithoutRef<'div'> {\n  /** Notifications position */\n  position?:\n    | 'top-left'\n    | 'top-right'\n    | 'top-center'\n    | 'bottom-left'\n    | 'bottom-right'\n    | 'bottom-center';\n\n  /** Auto close timeout for all notifications, false to disable auto close, can be overwritten for individual notifications by showNotification function */\n  autoClose?: number | false;\n\n  /** Notification transitions duration, 0 to turn transitions off */\n  transitionDuration?: number;\n\n  /** Notification width in px, cannot exceed 100% */\n  containerWidth?: number;\n\n  /** Notification max-height in px, used for transitions */\n  notificationMaxHeight?: number;\n\n  /** Maximum amount of notifications displayed at a time, other new notifications will be added to queue */\n  limit?: number;\n\n  /** Notifications container z-index */\n  zIndex?: number;\n}\n\nexport function NotificationsProvider({\n  className,\n  position = 'bottom-right',\n  themeOverride,\n  autoClose = 4000,\n  transitionDuration = 250,\n  containerWidth = 440,\n  notificationMaxHeight = 200,\n  limit = 5,\n  zIndex = 5000,\n  style,\n  children,\n  ...others\n}: NotificationProviderProps) {\n  const {\n    notifications,\n    queue,\n    showNotification,\n    updateNotification,\n    hideNotification,\n    clean,\n    cleanQueue,\n  } = useNotificationsState({ limit });\n  const reduceMotion = useReducedMotion();\n  const duration = reduceMotion ? 1 : transitionDuration;\n  const theme = useMantineTheme(themeOverride);\n  const classes = useStyles({ theme });\n  const positioning = (POSITIONS.includes(position) ? position : 'bottom-right').split(\n    '-'\n  ) as NotificationsProviderPositioning;\n\n  const items = notifications.map((notification) => (\n    <Transition\n      key={notification.id}\n      timeout={duration}\n      unmountOnExit\n      mountOnEnter\n      onEnter={(node: any) => node.offsetHeight}\n    >\n      {(state) => (\n        <NotificationContainer\n          notification={notification}\n          onHide={hideNotification}\n          className={classes.notification}\n          autoClose={autoClose}\n          style={{\n            ...getNotificationStateStyles({\n              state,\n              positioning,\n              transitionDuration: duration,\n              maxHeight: notificationMaxHeight,\n            }),\n          }}\n        />\n      )}\n    </Transition>\n  ));\n\n  return (\n    <NotificationsContext.Provider\n      value={{\n        notifications,\n        queue,\n        showNotification,\n        hideNotification,\n        updateNotification,\n        clean,\n        cleanQueue,\n      }}\n    >\n      <Portal zIndex={zIndex}>\n        <div\n          className={cx(classes.notifications, className)}\n          style={{\n            maxWidth: containerWidth,\n            ...getPositionStyles(positioning, containerWidth, theme.spacing.md),\n            ...style,\n          }}\n          {...others}\n        >\n          <TransitionGroup>{items}</TransitionGroup>\n        </div>\n      </Portal>\n\n      {children}\n    </NotificationsContext.Provider>\n  );\n}\n\nNotificationsProvider.displayName = '@mantine/notifications/NotificationsProvider';\n"],"names":["useNotificationsState","useReducedMotion","useMantineTheme","useStyles","Transition","NotificationContainer","getNotificationStateStyles","NotificationsContext","Portal","cx","getPositionStyles","TransitionGroup"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,MAAM,YAAY;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;+BAkCoC,IAaR;AAbQ,eACpC;AAAA;AAAA,IACA,WAAW;AAAA,IACX;AAAA,IACA,YAAY;AAAA,IACZ,qBAAqB;AAAA,IACrB,iBAAiB;AAAA,IACjB,wBAAwB;AAAA,IACxB,QAAQ;AAAA,IACR,SAAS;AAAA,IACT;AAAA,IACA;AAAA,MAXoC,IAYjC,mBAZiC,IAYjC;AAAA,IAXH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAGA,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACEA,iCAAsB,CAAE;AAC5B,QAAM,eAAeC;AACrB,QAAM,WAAW,eAAe,IAAI;AACpC,QAAM,QAAQC,qBAAgB;AAC9B,QAAM,UAAUC,wCAAU,CAAE;AAC5B,QAAM,cAAe,WAAU,SAAS,YAAY,WAAW,gBAAgB,MAC7E;AAGF,QAAM,QAAQ,cAAc,IAAI,CAAC,8DAC9BC,iCAAD;AAAA,IACE,KAAK,aAAa;AAAA,IAClB,SAAS;AAAA,IACT,eAAa;AAAA,IACb,cAAY;AAAA,IACZ,SAAS,CAAC,SAAc,KAAK;AAAA,KAE5B,CAAC,uDACCC,kCAAD;AAAA,IACE;AAAA,IACA,QAAQ;AAAA,IACR,WAAW,QAAQ;AAAA,IACnB;AAAA,IACA,OAAO,mBACFC,sCAA2B;AAAA,MAC5B;AAAA,MACA;AAAA,MACA,oBAAoB;AAAA,MACpB,WAAW;AAAA;AAAA;AAQvB,sDACGC,2CAAqB,UAAtB;AAAA,IACE,OAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA,kDAGDC,aAAD;AAAA,IAAQ;AAAA,kDACL,OAAD;AAAA,IACE,WAAWC,YAAG,QAAQ,eAAe;AAAA,IACrC,OAAO;AAAA,MACL,UAAU;AAAA,OACPC,6BAAkB,aAAa,gBAAgB,MAAM,QAAQ,MAC7D;AAAA,KAED,sDAEHC,sCAAD,MAAkB,UAIrB;AAAA;AAKP,sBAAsB,cAAc;;;;"}
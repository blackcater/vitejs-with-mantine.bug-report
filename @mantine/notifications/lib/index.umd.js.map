{"version":3,"file":"index.umd.js","sources":["../src/Notifications.context.ts","../src/use-notifications/use-notifications.ts","../src/NotificationsProvider/get-position-styles/get-position-styles.ts","../src/NotificationsProvider/get-notification-state-styles/get-notification-state-styles.ts","../src/NotificationContainer/get-auto-close/get-auto-close.ts","../src/NotificationContainer/NotificationContainer.tsx","../src/NotificationsProvider/NotificationsProvider.styles.ts","../src/NotificationsProvider/use-notifications-state/use-notifications-state.ts","../src/NotificationsProvider/NotificationsProvider.tsx"],"sourcesContent":["import { createContext } from 'react';\nimport { NotificationsContextProps } from './types';\n\nexport const NotificationsContext = createContext<NotificationsContextProps>(null);\nNotificationsContext.displayName = '@mantine/notifications/NotificationsContext';\n","import { useContext } from 'react';\nimport { NotificationsContext } from '../Notifications.context';\n\nexport function useNotifications() {\n  const context = useContext(NotificationsContext);\n\n  if (!context) {\n    throw new Error('@mantine/notifications: NotificationsProvider was not found in tree');\n  }\n\n  return context;\n}\n","import React from 'react';\nimport { NotificationsProviderPositioning } from '../../types';\n\nexport default function getPositionStyles(\n  [vertical, horizontal]: NotificationsProviderPositioning,\n  containerWidth: number,\n  spacing: number\n) {\n  const styles: React.CSSProperties = {};\n\n  vertical === 'top' && (styles.top = spacing);\n  vertical === 'bottom' && (styles.bottom = spacing);\n\n  horizontal === 'left' && (styles.left = spacing);\n  horizontal === 'right' && (styles.right = spacing);\n  horizontal === 'center' && (styles.left = `calc(50% - ${containerWidth / 2}px)`);\n\n  return styles;\n}\n","import { TransitionStatus } from 'react-transition-group';\nimport { NotificationsProviderPositioning } from '../../types';\n\ninterface NotificationStateStylesProps {\n  state: TransitionStatus;\n  maxHeight: number;\n  positioning: NotificationsProviderPositioning;\n  transitionDuration: number;\n}\n\nconst transforms = {\n  left: 'translateX(-100%)',\n  right: 'translateX(100%)',\n  'top-center': 'translateY(-100%)',\n  'bottom-center': 'translateY(100%)',\n};\n\nconst noTransform = {\n  left: 'translateX(0)',\n  right: 'translateX(0)',\n  'top-center': 'translateY(0)',\n  'bottom-center': 'translateY(0)',\n};\n\nexport default function getNotificationStateStyles({\n  state,\n  maxHeight,\n  positioning,\n  transitionDuration,\n}: NotificationStateStylesProps): React.CSSProperties {\n  const [vertical, horizontal] = positioning;\n  const property = horizontal === 'center' ? `${vertical}-center` : horizontal;\n\n  const commonStyles: React.CSSProperties = {\n    opacity: 0,\n    maxHeight,\n    transform: transforms[property],\n    transitionDuration: `${transitionDuration}ms, ${transitionDuration}ms, ${transitionDuration}ms`,\n    transitionTimingFunction: 'cubic-bezier(.51,.3,0,1.21), cubic-bezier(.51,.3,0,1.21), linear',\n    transitionProperty: 'opacity, transform, max-height',\n  };\n\n  const inState: React.CSSProperties = {\n    opacity: 1,\n    transform: noTransform[property],\n  };\n\n  const outState: React.CSSProperties = {\n    opacity: 0,\n    maxHeight: 0,\n    transform: transforms[property],\n  };\n\n  const transitionStyles = {\n    entering: inState,\n    entered: inState,\n    exiting: outState,\n    exited: outState,\n  };\n\n  return { ...commonStyles, ...transitionStyles[state] };\n}\n","import { NotificationProps } from '../../types';\n\nexport default function getAutoClose(autoClose: boolean | number, notification: NotificationProps) {\n  if (typeof notification.autoClose === 'number') {\n    return notification.autoClose;\n  }\n\n  if (notification.autoClose === false || autoClose === false) {\n    return false;\n  }\n\n  return autoClose;\n}\n","import React, { useEffect, useRef } from 'react';\nimport { Notification, DefaultProps } from '@mantine/core';\nimport getAutoClose from './get-auto-close/get-auto-close';\nimport { NotificationProps } from '../types';\n\nexport interface NotificationContainerProps extends DefaultProps {\n  notification: NotificationProps;\n  onHide(id: string): void;\n  autoClose: false | number;\n}\n\nexport default function NotificationContainer({\n  className,\n  style,\n  themeOverride,\n  notification,\n  autoClose,\n  onHide,\n}: NotificationContainerProps) {\n  const autoCloseTimeout = getAutoClose(autoClose, notification);\n  const hideTimeout = useRef<number>();\n\n  const handleHide = () => {\n    onHide(notification.id);\n    window.clearTimeout(hideTimeout.current);\n  };\n\n  const cancelDelayedHide = () => {\n    clearTimeout(hideTimeout.current);\n  };\n\n  const handleDelayedHide = () => {\n    if (typeof autoCloseTimeout === 'number') {\n      hideTimeout.current = window.setTimeout(handleHide, autoCloseTimeout);\n    }\n  };\n\n  useEffect(() => {\n    if (typeof notification.onOpen === 'function') {\n      notification.onOpen(notification);\n    }\n  }, []);\n\n  useEffect(() => {\n    handleDelayedHide();\n    return cancelDelayedHide;\n  }, [autoClose, notification.autoClose]);\n\n  return (\n    <Notification\n      style={style}\n      className={className}\n      title={notification.title}\n      themeOverride={themeOverride}\n      onClose={handleHide}\n      color={notification.color}\n      icon={notification.icon}\n      loading={notification.loading}\n      disallowClose={notification.disallowClose}\n      onMouseEnter={cancelDelayedHide}\n      onMouseLeave={handleDelayedHide}\n    >\n      {notification.message}\n    </Notification>\n  );\n}\n\nNotificationContainer.displayName = '@mantine/notifications/NotificationContainer';\n","import { createUseStyles } from 'react-jss';\nimport { MantineTheme } from '@mantine/core';\n\ninterface NotificationProviderStyles {\n  theme: MantineTheme;\n}\n\nexport default createUseStyles(\n  {\n    notifications: ({ theme }: NotificationProviderStyles) => ({\n      width: `calc(100% - ${theme.spacing.md * 2}px)`,\n      boxSizing: 'border-box',\n      position: 'fixed',\n      zIndex: 1000,\n    }),\n\n    notification: ({ theme }: NotificationProviderStyles) => ({\n      '& + &': {\n        marginTop: theme.spacing.sm,\n      },\n    }),\n  },\n  { link: true }\n);\n","import { useQueue, randomId } from '@mantine/hooks';\nimport { NotificationProps } from '../../types';\n\nexport default function useNotificationsState({ limit }: { limit: number }) {\n  const { state, queue, update, cleanQueue } = useQueue<NotificationProps>({\n    initialValues: [],\n    limit,\n  });\n\n  const showNotification = (notification: NotificationProps) => {\n    const id = notification.id || randomId();\n\n    update((notifications) => {\n      if (notification.id && notifications.some((n) => n.id === notification.id)) {\n        return notifications;\n      }\n\n      return [...notifications, { ...notification, id }];\n    });\n\n    return id;\n  };\n\n  const updateNotification = (id: string, notification: NotificationProps) =>\n    update((notifications) => {\n      const index = notifications.findIndex((n) => n.id === id);\n\n      if (index === -1) {\n        return notifications;\n      }\n\n      const newNotifications = [...notifications];\n      newNotifications[index] = notification;\n\n      return newNotifications;\n    });\n\n  const hideNotification = (id: string) =>\n    update((notifications) =>\n      notifications.filter((notification) => {\n        if (notification.id === id) {\n          typeof notification.onClose === 'function' && notification.onClose(notification);\n          return false;\n        }\n\n        return true;\n      })\n    );\n\n  const clean = () => update(() => []);\n\n  return {\n    notifications: state,\n    queue,\n    showNotification,\n    updateNotification,\n    hideNotification,\n    cleanQueue,\n    clean,\n  };\n}\n","import React from 'react';\nimport cx from 'clsx';\nimport { Transition, TransitionGroup } from 'react-transition-group';\nimport { DefaultProps, useMantineTheme, Portal } from '@mantine/core';\nimport { useReducedMotion } from '@mantine/hooks';\nimport { NotificationsContext } from '../Notifications.context';\nimport { NotificationsProviderPositioning } from '../types';\nimport getPositionStyles from './get-position-styles/get-position-styles';\nimport getNotificationStateStyles from './get-notification-state-styles/get-notification-state-styles';\nimport NotificationContainer from '../NotificationContainer/NotificationContainer';\nimport useStyles from './NotificationsProvider.styles';\nimport useNotificationsState from './use-notifications-state/use-notifications-state';\n\nconst POSITIONS = [\n  'top-left',\n  'top-right',\n  'top-center',\n  'bottom-left',\n  'bottom-right',\n  'bottom-center',\n] as const;\n\nexport interface NotificationProviderProps\n  extends DefaultProps,\n    React.ComponentPropsWithoutRef<'div'> {\n  /** Notifications position */\n  position?:\n    | 'top-left'\n    | 'top-right'\n    | 'top-center'\n    | 'bottom-left'\n    | 'bottom-right'\n    | 'bottom-center';\n\n  /** Auto close timeout for all notifications, false to disable auto close, can be overwritten for individual notifications by showNotification function */\n  autoClose?: number | false;\n\n  /** Notification transitions duration, 0 to turn transitions off */\n  transitionDuration?: number;\n\n  /** Notification width in px, cannot exceed 100% */\n  containerWidth?: number;\n\n  /** Notification max-height in px, used for transitions */\n  notificationMaxHeight?: number;\n\n  /** Maximum amount of notifications displayed at a time, other new notifications will be added to queue */\n  limit?: number;\n\n  /** Notifications container z-index */\n  zIndex?: number;\n}\n\nexport function NotificationsProvider({\n  className,\n  position = 'bottom-right',\n  themeOverride,\n  autoClose = 4000,\n  transitionDuration = 250,\n  containerWidth = 440,\n  notificationMaxHeight = 200,\n  limit = 5,\n  zIndex = 5000,\n  style,\n  children,\n  ...others\n}: NotificationProviderProps) {\n  const {\n    notifications,\n    showNotification,\n    updateNotification,\n    hideNotification,\n    clean,\n    cleanQueue,\n  } = useNotificationsState({ limit });\n  const reduceMotion = useReducedMotion();\n  const duration = reduceMotion ? 1 : transitionDuration;\n  const theme = useMantineTheme(themeOverride);\n  const classes = useStyles({ theme });\n  const positioning = (POSITIONS.includes(position) ? position : 'bottom-right').split(\n    '-'\n  ) as NotificationsProviderPositioning;\n\n  const items = notifications.map((notification) => (\n    <Transition\n      key={notification.id}\n      timeout={duration}\n      unmountOnExit\n      mountOnEnter\n      onEnter={(node: any) => node.offsetHeight}\n    >\n      {(state) => (\n        <NotificationContainer\n          notification={notification}\n          onHide={hideNotification}\n          className={classes.notification}\n          autoClose={autoClose}\n          style={{\n            ...getNotificationStateStyles({\n              state,\n              positioning,\n              transitionDuration: duration,\n              maxHeight: notificationMaxHeight,\n            }),\n          }}\n        />\n      )}\n    </Transition>\n  ));\n\n  return (\n    <NotificationsContext.Provider\n      value={{\n        notifications,\n        showNotification,\n        hideNotification,\n        updateNotification,\n        clean,\n        cleanQueue,\n      }}\n    >\n      <Portal zIndex={zIndex}>\n        <div\n          className={cx(classes.notifications, className)}\n          style={{\n            maxWidth: containerWidth,\n            ...getPositionStyles(positioning, containerWidth, theme.spacing.md),\n            ...style,\n          }}\n          {...others}\n        >\n          <TransitionGroup>{items}</TransitionGroup>\n        </div>\n      </Portal>\n\n      {children}\n    </NotificationsContext.Provider>\n  );\n}\n\nNotificationsProvider.displayName = '@mantine/notifications/NotificationsProvider';\n"],"names":["createContext","useContext","__spreadValues","useRef","Notification","createUseStyles","useQueue","randomId","useReducedMotion","useMantineTheme","Transition","Portal","cx","TransitionGroup"],"mappings":"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"}